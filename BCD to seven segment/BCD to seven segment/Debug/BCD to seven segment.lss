
BCD to seven segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000065c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000065c  000006d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000006d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000e28  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000727  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000023f  00000000  00000000  0000160f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e1  00000000  00000000  0000184e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00001d30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024c  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000069c  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 2c 03 	jmp	0x658	; 0x658 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define  F_CPU 8000000UL
#include <util/delay.h>
#include "seven segment bcd.h"
int main(void)
{
	seven_seg_init('D');
  92:	84 e4       	ldi	r24, 0x44	; 68
  94:	0e 94 12 03 	call	0x624	; 0x624 <seven_seg_init>
	unsigned char counter=0;
    while(1)
    {
        for(counter=0;counter<=9;counter++)
  98:	c0 e0       	ldi	r28, 0x00	; 0
  9a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			seven_seg_write('D',counter);
  9c:	84 e4       	ldi	r24, 0x44	; 68
  9e:	6c 2f       	mov	r22, r28
  a0:	0e 94 29 03 	call	0x652	; 0x652 <seven_seg_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	99 e6       	ldi	r25, 0x69	; 105
  a8:	a8 e1       	ldi	r26, 0x18	; 24
  aa:	81 50       	subi	r24, 0x01	; 1
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	a0 40       	sbci	r26, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x22>
  b4:	00 00       	nop
{
	seven_seg_init('D');
	unsigned char counter=0;
    while(1)
    {
        for(counter=0;counter<=9;counter++)
  b6:	cf 5f       	subi	r28, 0xFF	; 255
  b8:	ca 30       	cpi	r28, 0x0A	; 10
  ba:	80 f3       	brcs	.-32     	; 0x9c <main+0xa>
  bc:	cd 2f       	mov	r28, r29
  be:	ee cf       	rjmp	.-36     	; 0x9c <main+0xa>

000000c0 <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  c0:	82 34       	cpi	r24, 0x42	; 66
  c2:	51 f1       	breq	.+84     	; 0x118 <DIO_vsetPINDir+0x58>
  c4:	83 34       	cpi	r24, 0x43	; 67
  c6:	20 f4       	brcc	.+8      	; 0xd0 <DIO_vsetPINDir+0x10>
  c8:	81 34       	cpi	r24, 0x41	; 65
  ca:	09 f0       	breq	.+2      	; 0xce <DIO_vsetPINDir+0xe>
  cc:	7b c0       	rjmp	.+246    	; 0x1c4 <DIO_vsetPINDir+0x104>
  ce:	07 c0       	rjmp	.+14     	; 0xde <DIO_vsetPINDir+0x1e>
  d0:	83 34       	cpi	r24, 0x43	; 67
  d2:	09 f4       	brne	.+2      	; 0xd6 <DIO_vsetPINDir+0x16>
  d4:	3e c0       	rjmp	.+124    	; 0x152 <DIO_vsetPINDir+0x92>
  d6:	84 34       	cpi	r24, 0x44	; 68
  d8:	09 f0       	breq	.+2      	; 0xdc <DIO_vsetPINDir+0x1c>
  da:	74 c0       	rjmp	.+232    	; 0x1c4 <DIO_vsetPINDir+0x104>
  dc:	57 c0       	rjmp	.+174    	; 0x18c <DIO_vsetPINDir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
  de:	41 30       	cpi	r20, 0x01	; 1
  e0:	69 f4       	brne	.+26     	; 0xfc <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
  e2:	2a b3       	in	r18, 0x1a	; 26
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	ac 01       	movw	r20, r24
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_vsetPINDir+0x30>
  ec:	44 0f       	add	r20, r20
  ee:	55 1f       	adc	r21, r21
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_vsetPINDir+0x2c>
  f4:	ba 01       	movw	r22, r20
  f6:	62 2b       	or	r22, r18
  f8:	6a bb       	out	0x1a, r22	; 26
  fa:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
  fc:	2a b3       	in	r18, 0x1a	; 26
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	ac 01       	movw	r20, r24
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_vsetPINDir+0x4a>
 106:	44 0f       	add	r20, r20
 108:	55 1f       	adc	r21, r21
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_vsetPINDir+0x46>
 10e:	ba 01       	movw	r22, r20
 110:	60 95       	com	r22
 112:	62 23       	and	r22, r18
 114:	6a bb       	out	0x1a, r22	; 26
 116:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 118:	41 30       	cpi	r20, 0x01	; 1
 11a:	69 f4       	brne	.+26     	; 0x136 <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	ac 01       	movw	r20, r24
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_vsetPINDir+0x6a>
 126:	44 0f       	add	r20, r20
 128:	55 1f       	adc	r21, r21
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_vsetPINDir+0x66>
 12e:	ba 01       	movw	r22, r20
 130:	62 2b       	or	r22, r18
 132:	67 bb       	out	0x17, r22	; 23
 134:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 136:	27 b3       	in	r18, 0x17	; 23
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	ac 01       	movw	r20, r24
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_vsetPINDir+0x84>
 140:	44 0f       	add	r20, r20
 142:	55 1f       	adc	r21, r21
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_vsetPINDir+0x80>
 148:	ba 01       	movw	r22, r20
 14a:	60 95       	com	r22
 14c:	62 23       	and	r22, r18
 14e:	67 bb       	out	0x17, r22	; 23
 150:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 152:	41 30       	cpi	r20, 0x01	; 1
 154:	69 f4       	brne	.+26     	; 0x170 <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 156:	24 b3       	in	r18, 0x14	; 20
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	ac 01       	movw	r20, r24
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_vsetPINDir+0xa4>
 160:	44 0f       	add	r20, r20
 162:	55 1f       	adc	r21, r21
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_vsetPINDir+0xa0>
 168:	ba 01       	movw	r22, r20
 16a:	62 2b       	or	r22, r18
 16c:	64 bb       	out	0x14, r22	; 20
 16e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 170:	24 b3       	in	r18, 0x14	; 20
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	ac 01       	movw	r20, r24
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_vsetPINDir+0xbe>
 17a:	44 0f       	add	r20, r20
 17c:	55 1f       	adc	r21, r21
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_vsetPINDir+0xba>
 182:	ba 01       	movw	r22, r20
 184:	60 95       	com	r22
 186:	62 23       	and	r22, r18
 188:	64 bb       	out	0x14, r22	; 20
 18a:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 18c:	41 30       	cpi	r20, 0x01	; 1
 18e:	69 f4       	brne	.+26     	; 0x1aa <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 190:	21 b3       	in	r18, 0x11	; 17
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	ac 01       	movw	r20, r24
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_vsetPINDir+0xde>
 19a:	44 0f       	add	r20, r20
 19c:	55 1f       	adc	r21, r21
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_vsetPINDir+0xda>
 1a2:	ba 01       	movw	r22, r20
 1a4:	62 2b       	or	r22, r18
 1a6:	61 bb       	out	0x11, r22	; 17
 1a8:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 1aa:	21 b3       	in	r18, 0x11	; 17
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	ac 01       	movw	r20, r24
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_vsetPINDir+0xf8>
 1b4:	44 0f       	add	r20, r20
 1b6:	55 1f       	adc	r21, r21
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_vsetPINDir+0xf4>
 1bc:	ba 01       	movw	r22, r20
 1be:	60 95       	com	r22
 1c0:	62 23       	and	r22, r18
 1c2:	61 bb       	out	0x11, r22	; 17
 1c4:	08 95       	ret

000001c6 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 1c6:	82 34       	cpi	r24, 0x42	; 66
 1c8:	51 f1       	breq	.+84     	; 0x21e <DIO_write+0x58>
 1ca:	83 34       	cpi	r24, 0x43	; 67
 1cc:	20 f4       	brcc	.+8      	; 0x1d6 <DIO_write+0x10>
 1ce:	81 34       	cpi	r24, 0x41	; 65
 1d0:	09 f0       	breq	.+2      	; 0x1d4 <DIO_write+0xe>
 1d2:	7b c0       	rjmp	.+246    	; 0x2ca <DIO_write+0x104>
 1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <DIO_write+0x1e>
 1d6:	83 34       	cpi	r24, 0x43	; 67
 1d8:	09 f4       	brne	.+2      	; 0x1dc <DIO_write+0x16>
 1da:	3e c0       	rjmp	.+124    	; 0x258 <DIO_write+0x92>
 1dc:	84 34       	cpi	r24, 0x44	; 68
 1de:	09 f0       	breq	.+2      	; 0x1e2 <DIO_write+0x1c>
 1e0:	74 c0       	rjmp	.+232    	; 0x2ca <DIO_write+0x104>
 1e2:	57 c0       	rjmp	.+174    	; 0x292 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
 1e4:	41 30       	cpi	r20, 0x01	; 1
 1e6:	69 f4       	brne	.+26     	; 0x202 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 1e8:	2b b3       	in	r18, 0x1b	; 27
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	ac 01       	movw	r20, r24
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_write+0x30>
 1f2:	44 0f       	add	r20, r20
 1f4:	55 1f       	adc	r21, r21
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_write+0x2c>
 1fa:	ba 01       	movw	r22, r20
 1fc:	62 2b       	or	r22, r18
 1fe:	6b bb       	out	0x1b, r22	; 27
 200:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 202:	2b b3       	in	r18, 0x1b	; 27
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	ac 01       	movw	r20, r24
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_write+0x4a>
 20c:	44 0f       	add	r20, r20
 20e:	55 1f       	adc	r21, r21
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_write+0x46>
 214:	ba 01       	movw	r22, r20
 216:	60 95       	com	r22
 218:	62 23       	and	r22, r18
 21a:	6b bb       	out	0x1b, r22	; 27
 21c:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 21e:	41 30       	cpi	r20, 0x01	; 1
 220:	69 f4       	brne	.+26     	; 0x23c <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 222:	28 b3       	in	r18, 0x18	; 24
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	ac 01       	movw	r20, r24
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_write+0x6a>
 22c:	44 0f       	add	r20, r20
 22e:	55 1f       	adc	r21, r21
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_write+0x66>
 234:	ba 01       	movw	r22, r20
 236:	62 2b       	or	r22, r18
 238:	68 bb       	out	0x18, r22	; 24
 23a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 23c:	28 b3       	in	r18, 0x18	; 24
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	ac 01       	movw	r20, r24
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_write+0x84>
 246:	44 0f       	add	r20, r20
 248:	55 1f       	adc	r21, r21
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_write+0x80>
 24e:	ba 01       	movw	r22, r20
 250:	60 95       	com	r22
 252:	62 23       	and	r22, r18
 254:	68 bb       	out	0x18, r22	; 24
 256:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 258:	41 30       	cpi	r20, 0x01	; 1
 25a:	69 f4       	brne	.+26     	; 0x276 <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 25c:	25 b3       	in	r18, 0x15	; 21
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	ac 01       	movw	r20, r24
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_write+0xa4>
 266:	44 0f       	add	r20, r20
 268:	55 1f       	adc	r21, r21
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_write+0xa0>
 26e:	ba 01       	movw	r22, r20
 270:	62 2b       	or	r22, r18
 272:	65 bb       	out	0x15, r22	; 21
 274:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 276:	25 b3       	in	r18, 0x15	; 21
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	ac 01       	movw	r20, r24
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_write+0xbe>
 280:	44 0f       	add	r20, r20
 282:	55 1f       	adc	r21, r21
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_write+0xba>
 288:	ba 01       	movw	r22, r20
 28a:	60 95       	com	r22
 28c:	62 23       	and	r22, r18
 28e:	65 bb       	out	0x15, r22	; 21
 290:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 292:	41 30       	cpi	r20, 0x01	; 1
 294:	69 f4       	brne	.+26     	; 0x2b0 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 296:	22 b3       	in	r18, 0x12	; 18
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	ac 01       	movw	r20, r24
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_write+0xde>
 2a0:	44 0f       	add	r20, r20
 2a2:	55 1f       	adc	r21, r21
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_write+0xda>
 2a8:	ba 01       	movw	r22, r20
 2aa:	62 2b       	or	r22, r18
 2ac:	62 bb       	out	0x12, r22	; 18
 2ae:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 2b0:	22 b3       	in	r18, 0x12	; 18
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	ac 01       	movw	r20, r24
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_write+0xf8>
 2ba:	44 0f       	add	r20, r20
 2bc:	55 1f       	adc	r21, r21
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_write+0xf4>
 2c2:	ba 01       	movw	r22, r20
 2c4:	60 95       	com	r22
 2c6:	62 23       	and	r22, r18
 2c8:	62 bb       	out	0x12, r22	; 18
 2ca:	08 95       	ret

000002cc <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 2cc:	82 34       	cpi	r24, 0x42	; 66
 2ce:	f1 f0       	breq	.+60     	; 0x30c <DIO_u8read+0x40>
 2d0:	83 34       	cpi	r24, 0x43	; 67
 2d2:	20 f4       	brcc	.+8      	; 0x2dc <DIO_u8read+0x10>
 2d4:	81 34       	cpi	r24, 0x41	; 65
 2d6:	09 f0       	breq	.+2      	; 0x2da <DIO_u8read+0xe>
 2d8:	4f c0       	rjmp	.+158    	; 0x378 <DIO_u8read+0xac>
 2da:	06 c0       	rjmp	.+12     	; 0x2e8 <DIO_u8read+0x1c>
 2dc:	83 34       	cpi	r24, 0x43	; 67
 2de:	41 f1       	breq	.+80     	; 0x330 <DIO_u8read+0x64>
 2e0:	84 34       	cpi	r24, 0x44	; 68
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <DIO_u8read+0x1a>
 2e4:	49 c0       	rjmp	.+146    	; 0x378 <DIO_u8read+0xac>
 2e6:	36 c0       	rjmp	.+108    	; 0x354 <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 2e8:	29 b3       	in	r18, 0x19	; 25
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	06 2e       	mov	r0, r22
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_u8read+0x2a>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_u8read+0x26>
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	82 23       	and	r24, r18
 2fe:	93 23       	and	r25, r19
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_u8read+0x3a>
 302:	95 95       	asr	r25
 304:	87 95       	ror	r24
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_u8read+0x36>
		break;
 30a:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 30c:	26 b3       	in	r18, 0x16	; 22
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	06 2e       	mov	r0, r22
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_u8read+0x4e>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_u8read+0x4a>
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	82 23       	and	r24, r18
 322:	93 23       	and	r25, r19
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_u8read+0x5e>
 326:	95 95       	asr	r25
 328:	87 95       	ror	r24
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_u8read+0x5a>
		break;
 32e:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 330:	23 b3       	in	r18, 0x13	; 19
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	06 2e       	mov	r0, r22
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_u8read+0x72>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	0a 94       	dec	r0
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_u8read+0x6e>
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	82 23       	and	r24, r18
 346:	93 23       	and	r25, r19
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_u8read+0x82>
 34a:	95 95       	asr	r25
 34c:	87 95       	ror	r24
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_u8read+0x7e>
		break;
 352:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 354:	20 b3       	in	r18, 0x10	; 16
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	06 2e       	mov	r0, r22
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_u8read+0x96>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_u8read+0x92>
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	82 23       	and	r24, r18
 36a:	93 23       	and	r25, r19
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_u8read+0xa6>
 36e:	95 95       	asr	r25
 370:	87 95       	ror	r24
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_u8read+0xa2>
		break;
 376:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 378:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 37a:	08 95       	ret

0000037c <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 37c:	82 34       	cpi	r24, 0x42	; 66
 37e:	b9 f0       	breq	.+46     	; 0x3ae <DIO_toggle+0x32>
 380:	83 34       	cpi	r24, 0x43	; 67
 382:	18 f4       	brcc	.+6      	; 0x38a <DIO_toggle+0xe>
 384:	81 34       	cpi	r24, 0x41	; 65
 386:	c9 f5       	brne	.+114    	; 0x3fa <DIO_toggle+0x7e>
 388:	05 c0       	rjmp	.+10     	; 0x394 <DIO_toggle+0x18>
 38a:	83 34       	cpi	r24, 0x43	; 67
 38c:	e9 f0       	breq	.+58     	; 0x3c8 <DIO_toggle+0x4c>
 38e:	84 34       	cpi	r24, 0x44	; 68
 390:	a1 f5       	brne	.+104    	; 0x3fa <DIO_toggle+0x7e>
 392:	27 c0       	rjmp	.+78     	; 0x3e2 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 394:	2b b3       	in	r18, 0x1b	; 27
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	ac 01       	movw	r20, r24
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_toggle+0x26>
 39e:	44 0f       	add	r20, r20
 3a0:	55 1f       	adc	r21, r21
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_toggle+0x22>
 3a6:	ba 01       	movw	r22, r20
 3a8:	62 27       	eor	r22, r18
 3aa:	6b bb       	out	0x1b, r22	; 27
		break;
 3ac:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 3ae:	28 b3       	in	r18, 0x18	; 24
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	ac 01       	movw	r20, r24
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_toggle+0x40>
 3b8:	44 0f       	add	r20, r20
 3ba:	55 1f       	adc	r21, r21
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_toggle+0x3c>
 3c0:	ba 01       	movw	r22, r20
 3c2:	62 27       	eor	r22, r18
 3c4:	68 bb       	out	0x18, r22	; 24
		break;
 3c6:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 3c8:	25 b3       	in	r18, 0x15	; 21
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	ac 01       	movw	r20, r24
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_toggle+0x5a>
 3d2:	44 0f       	add	r20, r20
 3d4:	55 1f       	adc	r21, r21
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_toggle+0x56>
 3da:	ba 01       	movw	r22, r20
 3dc:	62 27       	eor	r22, r18
 3de:	65 bb       	out	0x15, r22	; 21
		break;
 3e0:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 3e2:	22 b3       	in	r18, 0x12	; 18
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	ac 01       	movw	r20, r24
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_toggle+0x74>
 3ec:	44 0f       	add	r20, r20
 3ee:	55 1f       	adc	r21, r21
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_toggle+0x70>
 3f4:	ba 01       	movw	r22, r20
 3f6:	62 27       	eor	r22, r18
 3f8:	62 bb       	out	0x12, r22	; 18
 3fa:	08 95       	ret

000003fc <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
 3fc:	82 34       	cpi	r24, 0x42	; 66
 3fe:	61 f0       	breq	.+24     	; 0x418 <DIO_set_port_direction+0x1c>
 400:	83 34       	cpi	r24, 0x43	; 67
 402:	18 f4       	brcc	.+6      	; 0x40a <DIO_set_port_direction+0xe>
 404:	81 34       	cpi	r24, 0x41	; 65
 406:	69 f4       	brne	.+26     	; 0x422 <DIO_set_port_direction+0x26>
 408:	05 c0       	rjmp	.+10     	; 0x414 <DIO_set_port_direction+0x18>
 40a:	83 34       	cpi	r24, 0x43	; 67
 40c:	39 f0       	breq	.+14     	; 0x41c <DIO_set_port_direction+0x20>
 40e:	84 34       	cpi	r24, 0x44	; 68
 410:	41 f4       	brne	.+16     	; 0x422 <DIO_set_port_direction+0x26>
 412:	06 c0       	rjmp	.+12     	; 0x420 <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
 414:	6a bb       	out	0x1a, r22	; 26
		break ;
 416:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
 418:	67 bb       	out	0x17, r22	; 23
		break ;
 41a:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
 41c:	64 bb       	out	0x14, r22	; 20
		break ;
 41e:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
 420:	61 bb       	out	0x11, r22	; 17
 422:	08 95       	ret

00000424 <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 424:	82 34       	cpi	r24, 0x42	; 66
 426:	61 f0       	breq	.+24     	; 0x440 <DIO_write_port+0x1c>
 428:	83 34       	cpi	r24, 0x43	; 67
 42a:	18 f4       	brcc	.+6      	; 0x432 <DIO_write_port+0xe>
 42c:	81 34       	cpi	r24, 0x41	; 65
 42e:	69 f4       	brne	.+26     	; 0x44a <DIO_write_port+0x26>
 430:	05 c0       	rjmp	.+10     	; 0x43c <DIO_write_port+0x18>
 432:	83 34       	cpi	r24, 0x43	; 67
 434:	39 f0       	breq	.+14     	; 0x444 <DIO_write_port+0x20>
 436:	84 34       	cpi	r24, 0x44	; 68
 438:	41 f4       	brne	.+16     	; 0x44a <DIO_write_port+0x26>
 43a:	06 c0       	rjmp	.+12     	; 0x448 <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 43c:	6b bb       	out	0x1b, r22	; 27
		break ;
 43e:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 440:	68 bb       	out	0x18, r22	; 24
		break ;
 442:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 444:	65 bb       	out	0x15, r22	; 21
		break ;
 446:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 448:	62 bb       	out	0x12, r22	; 18
 44a:	08 95       	ret

0000044c <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
 44c:	82 34       	cpi	r24, 0x42	; 66
 44e:	61 f0       	breq	.+24     	; 0x468 <DIO_read_port+0x1c>
 450:	83 34       	cpi	r24, 0x43	; 67
 452:	18 f4       	brcc	.+6      	; 0x45a <DIO_read_port+0xe>
 454:	81 34       	cpi	r24, 0x41	; 65
 456:	71 f4       	brne	.+28     	; 0x474 <DIO_read_port+0x28>
 458:	05 c0       	rjmp	.+10     	; 0x464 <DIO_read_port+0x18>
 45a:	83 34       	cpi	r24, 0x43	; 67
 45c:	39 f0       	breq	.+14     	; 0x46c <DIO_read_port+0x20>
 45e:	84 34       	cpi	r24, 0x44	; 68
 460:	49 f4       	brne	.+18     	; 0x474 <DIO_read_port+0x28>
 462:	06 c0       	rjmp	.+12     	; 0x470 <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
 464:	89 b3       	in	r24, 0x19	; 25
		break ;
 466:	08 95       	ret
		case 'B':
		return_val=PINB; // read the value of port B 
 468:	86 b3       	in	r24, 0x16	; 22
		break ;
 46a:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C 
 46c:	83 b3       	in	r24, 0x13	; 19
		break ;
 46e:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D 
 470:	80 b3       	in	r24, 0x10	; 16
		break ;
 472:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
 474:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
 476:	08 95       	ret

00000478 <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 478:	82 34       	cpi	r24, 0x42	; 66
 47a:	51 f1       	breq	.+84     	; 0x4d0 <DIO_vconnectpullup+0x58>
 47c:	83 34       	cpi	r24, 0x43	; 67
 47e:	20 f4       	brcc	.+8      	; 0x488 <DIO_vconnectpullup+0x10>
 480:	81 34       	cpi	r24, 0x41	; 65
 482:	09 f0       	breq	.+2      	; 0x486 <DIO_vconnectpullup+0xe>
 484:	7b c0       	rjmp	.+246    	; 0x57c <DIO_vconnectpullup+0x104>
 486:	07 c0       	rjmp	.+14     	; 0x496 <DIO_vconnectpullup+0x1e>
 488:	83 34       	cpi	r24, 0x43	; 67
 48a:	09 f4       	brne	.+2      	; 0x48e <DIO_vconnectpullup+0x16>
 48c:	3e c0       	rjmp	.+124    	; 0x50a <DIO_vconnectpullup+0x92>
 48e:	84 34       	cpi	r24, 0x44	; 68
 490:	09 f0       	breq	.+2      	; 0x494 <DIO_vconnectpullup+0x1c>
 492:	74 c0       	rjmp	.+232    	; 0x57c <DIO_vconnectpullup+0x104>
 494:	57 c0       	rjmp	.+174    	; 0x544 <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
 496:	41 30       	cpi	r20, 0x01	; 1
 498:	69 f4       	brne	.+26     	; 0x4b4 <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
 49a:	2b b3       	in	r18, 0x1b	; 27
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	ac 01       	movw	r20, r24
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_vconnectpullup+0x30>
 4a4:	44 0f       	add	r20, r20
 4a6:	55 1f       	adc	r21, r21
 4a8:	6a 95       	dec	r22
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_vconnectpullup+0x2c>
 4ac:	ba 01       	movw	r22, r20
 4ae:	62 2b       	or	r22, r18
 4b0:	6b bb       	out	0x1b, r22	; 27
 4b2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 4b4:	2b b3       	in	r18, 0x1b	; 27
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	ac 01       	movw	r20, r24
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_vconnectpullup+0x4a>
 4be:	44 0f       	add	r20, r20
 4c0:	55 1f       	adc	r21, r21
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_vconnectpullup+0x46>
 4c6:	ba 01       	movw	r22, r20
 4c8:	60 95       	com	r22
 4ca:	62 23       	and	r22, r18
 4cc:	6b bb       	out	0x1b, r22	; 27
 4ce:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
 4d0:	41 30       	cpi	r20, 0x01	; 1
 4d2:	69 f4       	brne	.+26     	; 0x4ee <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
 4d4:	28 b3       	in	r18, 0x18	; 24
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	ac 01       	movw	r20, r24
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_vconnectpullup+0x6a>
 4de:	44 0f       	add	r20, r20
 4e0:	55 1f       	adc	r21, r21
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_vconnectpullup+0x66>
 4e6:	ba 01       	movw	r22, r20
 4e8:	62 2b       	or	r22, r18
 4ea:	68 bb       	out	0x18, r22	; 24
 4ec:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 4ee:	28 b3       	in	r18, 0x18	; 24
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	ac 01       	movw	r20, r24
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_vconnectpullup+0x84>
 4f8:	44 0f       	add	r20, r20
 4fa:	55 1f       	adc	r21, r21
 4fc:	6a 95       	dec	r22
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_vconnectpullup+0x80>
 500:	ba 01       	movw	r22, r20
 502:	60 95       	com	r22
 504:	62 23       	and	r22, r18
 506:	68 bb       	out	0x18, r22	; 24
 508:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
 50a:	41 30       	cpi	r20, 0x01	; 1
 50c:	69 f4       	brne	.+26     	; 0x528 <DIO_vconnectpullup+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
 50e:	25 b3       	in	r18, 0x15	; 21
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	ac 01       	movw	r20, r24
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_vconnectpullup+0xa4>
 518:	44 0f       	add	r20, r20
 51a:	55 1f       	adc	r21, r21
 51c:	6a 95       	dec	r22
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_vconnectpullup+0xa0>
 520:	ba 01       	movw	r22, r20
 522:	62 2b       	or	r22, r18
 524:	65 bb       	out	0x15, r22	; 21
 526:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 528:	25 b3       	in	r18, 0x15	; 21
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	ac 01       	movw	r20, r24
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_vconnectpullup+0xbe>
 532:	44 0f       	add	r20, r20
 534:	55 1f       	adc	r21, r21
 536:	6a 95       	dec	r22
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_vconnectpullup+0xba>
 53a:	ba 01       	movw	r22, r20
 53c:	60 95       	com	r22
 53e:	62 23       	and	r22, r18
 540:	65 bb       	out	0x15, r22	; 21
 542:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
 544:	41 30       	cpi	r20, 0x01	; 1
 546:	69 f4       	brne	.+26     	; 0x562 <DIO_vconnectpullup+0xea>
		{
			SET_BIT(PORTD,pinnumber);
 548:	22 b3       	in	r18, 0x12	; 18
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	ac 01       	movw	r20, r24
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_vconnectpullup+0xde>
 552:	44 0f       	add	r20, r20
 554:	55 1f       	adc	r21, r21
 556:	6a 95       	dec	r22
 558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_vconnectpullup+0xda>
 55a:	ba 01       	movw	r22, r20
 55c:	62 2b       	or	r22, r18
 55e:	62 bb       	out	0x12, r22	; 18
 560:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 562:	22 b3       	in	r18, 0x12	; 18
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	ac 01       	movw	r20, r24
 56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_vconnectpullup+0xf8>
 56c:	44 0f       	add	r20, r20
 56e:	55 1f       	adc	r21, r21
 570:	6a 95       	dec	r22
 572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_vconnectpullup+0xf4>
 574:	ba 01       	movw	r22, r20
 576:	60 95       	com	r22
 578:	62 23       	and	r22, r18
 57a:	62 bb       	out	0x12, r22	; 18
 57c:	08 95       	ret

0000057e <write_low_nibble>:
	}
}

void write_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;
 57e:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
 580:	82 34       	cpi	r24, 0x42	; 66
 582:	89 f0       	breq	.+34     	; 0x5a6 <write_low_nibble+0x28>
 584:	83 34       	cpi	r24, 0x43	; 67
 586:	18 f4       	brcc	.+6      	; 0x58e <write_low_nibble+0x10>
 588:	81 34       	cpi	r24, 0x41	; 65
 58a:	09 f5       	brne	.+66     	; 0x5ce <write_low_nibble+0x50>
 58c:	05 c0       	rjmp	.+10     	; 0x598 <write_low_nibble+0x1a>
 58e:	83 34       	cpi	r24, 0x43	; 67
 590:	89 f0       	breq	.+34     	; 0x5b4 <write_low_nibble+0x36>
 592:	84 34       	cpi	r24, 0x44	; 68
 594:	e1 f4       	brne	.+56     	; 0x5ce <write_low_nibble+0x50>
 596:	15 c0       	rjmp	.+42     	; 0x5c2 <write_low_nibble+0x44>
	{
		case 'A':
		PORTA&=0xf0;
 598:	8b b3       	in	r24, 0x1b	; 27
 59a:	80 7f       	andi	r24, 0xF0	; 240
 59c:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 59e:	8b b3       	in	r24, 0x1b	; 27
 5a0:	68 2b       	or	r22, r24
 5a2:	6b bb       	out	0x1b, r22	; 27
		break;
 5a4:	08 95       	ret
		case 'B':
		PORTB&=0xf0;
 5a6:	88 b3       	in	r24, 0x18	; 24
 5a8:	80 7f       	andi	r24, 0xF0	; 240
 5aa:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 5ac:	88 b3       	in	r24, 0x18	; 24
 5ae:	68 2b       	or	r22, r24
 5b0:	68 bb       	out	0x18, r22	; 24
		break;
 5b2:	08 95       	ret
		case 'C':
		PORTC&=0xf0;
 5b4:	85 b3       	in	r24, 0x15	; 21
 5b6:	80 7f       	andi	r24, 0xF0	; 240
 5b8:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 5ba:	85 b3       	in	r24, 0x15	; 21
 5bc:	68 2b       	or	r22, r24
 5be:	65 bb       	out	0x15, r22	; 21
		break;
 5c0:	08 95       	ret
		case 'D':
		PORTD&=0xf0;
 5c2:	82 b3       	in	r24, 0x12	; 18
 5c4:	80 7f       	andi	r24, 0xF0	; 240
 5c6:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 5c8:	82 b3       	in	r24, 0x12	; 18
 5ca:	68 2b       	or	r22, r24
 5cc:	62 bb       	out	0x12, r22	; 18
 5ce:	08 95       	ret

000005d0 <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
 5d0:	62 95       	swap	r22
 5d2:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 5d4:	82 34       	cpi	r24, 0x42	; 66
 5d6:	89 f0       	breq	.+34     	; 0x5fa <write_high_nibble+0x2a>
 5d8:	83 34       	cpi	r24, 0x43	; 67
 5da:	18 f4       	brcc	.+6      	; 0x5e2 <write_high_nibble+0x12>
 5dc:	81 34       	cpi	r24, 0x41	; 65
 5de:	09 f5       	brne	.+66     	; 0x622 <write_high_nibble+0x52>
 5e0:	05 c0       	rjmp	.+10     	; 0x5ec <write_high_nibble+0x1c>
 5e2:	83 34       	cpi	r24, 0x43	; 67
 5e4:	89 f0       	breq	.+34     	; 0x608 <write_high_nibble+0x38>
 5e6:	84 34       	cpi	r24, 0x44	; 68
 5e8:	e1 f4       	brne	.+56     	; 0x622 <write_high_nibble+0x52>
 5ea:	15 c0       	rjmp	.+42     	; 0x616 <write_high_nibble+0x46>
	{
		case 'A':
		PORTA&=0x0f;
 5ec:	8b b3       	in	r24, 0x1b	; 27
 5ee:	8f 70       	andi	r24, 0x0F	; 15
 5f0:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 5f2:	8b b3       	in	r24, 0x1b	; 27
 5f4:	68 2b       	or	r22, r24
 5f6:	6b bb       	out	0x1b, r22	; 27
		break;
 5f8:	08 95       	ret
		case 'B':
		PORTB&=0x0f;
 5fa:	88 b3       	in	r24, 0x18	; 24
 5fc:	8f 70       	andi	r24, 0x0F	; 15
 5fe:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 600:	88 b3       	in	r24, 0x18	; 24
 602:	68 2b       	or	r22, r24
 604:	68 bb       	out	0x18, r22	; 24
		break;
 606:	08 95       	ret
		case 'C':
		PORTC&=0x0f;
 608:	85 b3       	in	r24, 0x15	; 21
 60a:	8f 70       	andi	r24, 0x0F	; 15
 60c:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 60e:	85 b3       	in	r24, 0x15	; 21
 610:	68 2b       	or	r22, r24
 612:	65 bb       	out	0x15, r22	; 21
		break;
 614:	08 95       	ret
		case 'D':
		PORTD&=0x0f;
 616:	82 b3       	in	r24, 0x12	; 18
 618:	8f 70       	andi	r24, 0x0F	; 15
 61a:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 61c:	82 b3       	in	r24, 0x12	; 18
 61e:	68 2b       	or	r22, r24
 620:	62 bb       	out	0x12, r22	; 18
 622:	08 95       	ret

00000624 <seven_seg_init>:
 */ 

#include "DIO.h"
#include "std_macros.h"
void seven_seg_init(unsigned char portname)
{
 624:	cf 93       	push	r28
 626:	c8 2f       	mov	r28, r24
	DIO_vsetPINDir(portname,0,1);
 628:	60 e0       	ldi	r22, 0x00	; 0
 62a:	41 e0       	ldi	r20, 0x01	; 1
 62c:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_vsetPINDir>
	DIO_vsetPINDir(portname,1,1);
 630:	8c 2f       	mov	r24, r28
 632:	61 e0       	ldi	r22, 0x01	; 1
 634:	41 e0       	ldi	r20, 0x01	; 1
 636:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_vsetPINDir>
	DIO_vsetPINDir(portname,2,1);
 63a:	8c 2f       	mov	r24, r28
 63c:	62 e0       	ldi	r22, 0x02	; 2
 63e:	41 e0       	ldi	r20, 0x01	; 1
 640:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_vsetPINDir>
	DIO_vsetPINDir(portname,3,1);
 644:	8c 2f       	mov	r24, r28
 646:	63 e0       	ldi	r22, 0x03	; 3
 648:	41 e0       	ldi	r20, 0x01	; 1
 64a:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_vsetPINDir>
}
 64e:	cf 91       	pop	r28
 650:	08 95       	ret

00000652 <seven_seg_write>:
void seven_seg_write(unsigned char portname,unsigned char value)
{
	
	write_low_nibble(portname,value);
 652:	0e 94 bf 02 	call	0x57e	; 0x57e <write_low_nibble>
 656:	08 95       	ret

00000658 <_exit>:
 658:	f8 94       	cli

0000065a <__stop_program>:
 65a:	ff cf       	rjmp	.-2      	; 0x65a <__stop_program>
